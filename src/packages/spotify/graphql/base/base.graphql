# ==== INTERFACES =====

interface Item {
    id: ID
    name: String!
    type: ItemType!
    uri: String
}

interface Pagination {
    limit: Int!
    offset: Int!
    total: Int!
    next: Int
    previous: Int
}

# ======= ENUMS =======

enum ObjectType {
    playlist
    user
}

enum ItemType {
    track
    artist
    album
}

# ======= TYPES =======

type Image {
    url: String!
    height: Int
    width: Int
}

type ExternalUrls {
    spotify: String
}

type ExternalIds {
    """
    International Standard Recording Code
    """
    isrc: String
    """
    International Article Number
    """
    ean: String
    """
    Universal Product Code
    """
    upc: String
}

type Followers {
    total: Int!
}

type ExplicitContentSettings {
    filter_enabled: Boolean!
    filter_locked: Boolean!
}

type LinkedFrom {
    album: Album!
    artists: [Artist!]!
}
type Restrictions {
    reason: RestrictionReason!
}
type TopTracks {
    tracks: [Track!]!
}
type RelatedArtists {
    artists: [Artist!]!
}

enum AlbumType {
    album
    single
    compilation
}
enum DatePrecision {
    year
    month
    day
}
enum RestrictionReason {
    market
    product
    explicit
}
enum CopyrightType {
    copyright
    performance
}
enum TimeRange {
    long_term
    medium_term
    short_term
}

# ===== BASE QUERIES =====

type Category {
    id: ID!
    name: String!
    icons: [Image!]!
}
type Categories implements Pagination {
    categories: [Category!]!
    limit: Int!
    offset: Int!
    next: Int
    previous: Int
    total: Int!
}
type Query {
    category(id: ID!, country: String, locale: String): Category
    categories(
        limit: Int
        offset: Int
        country: String
        locale: String
    ): Categories
    genres: [String!]!
    markets: [String!]!
}
